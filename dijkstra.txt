#include <stdio.h>
#include <limits.h>
#define V 4

int minD(int dist[], int spt[]) {
    int min = INT_MAX;
    int min_index = -1; // Initialize to -1 to ensure it's a valid index after finding min

    for (int i = 0; i < V; i++) {
        if (spt[i] == 0 && dist[i] <= min) { // Changed from !spt[i] to spt[i] == 0
            min = dist[i];
            min_index = i;
        }
    }
    return min_index;
}

void dijkstra(int graph[V][V], int src) {
    int dist[V];
    int spt[V];

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        spt[i] = 0;
    }

    dist[src] = 0;

    for (int i = 0; i < V - 1; i++) {
        int k = minD(dist, spt); // Replaced u with k
        spt[k] = 1;

        for (int j = 0; j < V; j++) { // Replaced v with j
            // Updated the condition to use spt[j] == 0 instead of !spt[j]
            if (spt[j] == 0 && graph[k][j] && dist[k] != INT_MAX && dist[k] + graph[k][j] < dist[j]) {
                dist[j] = dist[k] + graph[k][j];
            }
        }
    }

    // Display the shortest distances
    for (int i = 0; i < V; i++) {
        printf("Distance from %d to %d is %d\n", src, i, dist[i]);
    }
}

int main() {
    int graph[V][V];
    int src;

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    printf("Enter the source vertex from (0 to %d): ", V - 1);
    scanf("%d", &src);

    dijkstra(graph, src);
    return 0;
}
